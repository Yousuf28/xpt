[{"name":"app.R","content":"## library(shiny)\r\n## library(SASxport)\r\n# library(DT)\r\n# library(haven)\r\n\r\ndownloadButton <- function(...) {\r\n  tag <- shiny::downloadButton(...)\r\n  tag$attribs$download <- NULL\r\n  tag\r\n}\r\n# Define UI for data upload app ----\r\nui <- shiny::fluidPage(\r\n      \r\n      shiny::fileInput('file1', \"Choose xpt file\",\r\n                       accept = '.xpt'),\r\n\r\n      shiny::tags$hr(),\r\n      downloadButton('down_xpt', 'Download file'),\r\n      shiny::tags$hr(),\r\n      shiny::tags$hr(),\r\n      DT::DTOutput('contents')\r\n\r\n    # )\r\n\r\n  \r\n)\r\n\r\n# Define server logic to read selected file ----\r\nserver <- function(input, output) {\r\n  v <- shiny::reactiveValues()\r\n  shiny::observeEvent(input$file1,{\r\n   shiny::req(input$file1)\r\n    # print(input$file1$name)\r\n  tab <- haven::read_xpt(input$file1$datapath)\r\n  ## tab <- SASxport::read.xport(input$file1$datapath)\r\n  ## tab <- Hmisc::sasxport.get(input$file1$datapath, lowernames = F)\r\n  v$tab <- tab  \r\n  \r\n  })\r\n  \r\n# df <-  shiny::eventReactive(input$file1, {\r\n#    req(input$file1)\r\n#   tab <- haven::read_xpt(input$file1$datapath)\r\n#   tab\r\n#  })\r\n  output$contents <- DT::renderDT({\r\n    shiny::req(input$file1)\r\n        df <- DT::datatable(v$tab,selection = 'none', editable = TRUE)\r\n        df\r\n\r\n  })\r\n  # proxy = DT::dataTableProxy('contents')\r\n  # \r\n  # observeEvent(input$contents_cell_edit, {\r\n  #   info = input$contents_cell_edit\r\n  #   str(info)\r\n  #   i = info$row\r\n  #   j = info$col\r\n  #   v = info$value\r\n  #   df[i, j] <<- DT::coerceValue(v, df[i, j])\r\n  #   replaceData(proxy, df, resetPaging = FALSE)  # important\r\n  # })\r\n  # \r\n  \r\n  # proxy5 = dataTableProxy('contents')\r\n  shiny::observeEvent(input$contents_cell_edit, {\r\n    # info = input$contents_cell_edit\r\n    v$tab <<- DT::editData(v$tab,input[['contents_cell_edit']], 'contents')\r\n    print(names(v$tab))\r\n    ## print(head(v$tab))\r\n    # str(info)  # check what info looks like (a data frame of 3 columns)\r\n    # print(info)\r\n    # t <- df()\r\n    # print(head(t))\r\n    # df <<- editData(t, info)\r\n    # replaceData(proxy5, df, resetPaging = FALSE)  # important\r\n    # the above steps can be merged into a single editData() call; see examples below\r\n  })\r\n  \r\n  output$down_xpt <- shiny::downloadHandler(\r\n    filename = function() {\r\n      # Sys.sleep(2)\r\n      # file_name <- basename(input$file1$datapath)\r\n     file_name <- strsplit(input$file1$name, '.xpt')[[1]]\r\n      print(file_name)\r\n\r\n      paste0(file_name, \".xpt\")\r\n      ## paste0('bw.xpt')\r\n\r\n    },\r\n    content = function(file) {\r\n      df <- v$tab\r\n      ## print(head(df))\r\n      ## print(names(df))\r\n      ## Sys.sleep(2)\r\n     ## write.csv(df, file, row.names = FALSE)\r\n     ## SASxport::write.xport(df, file=file)\r\n    ## print(file)\r\n## kk <- sub(tools::file_path_sans_ext(basename(file)), 'hello',file)\r\n      ## temp_dir <- tempdir()\r\n      ## print(temp_dir)\r\n      ## path <- fs::path(temp_dir, 'dm.xpt')\r\n\r\n      ## fs::file_move(file, path)\r\n\r\n      ## fs::file_copy(file, kk)\r\n\r\n     ## xportr::xportr_write(df, path = path )\r\n      haven::write_xpt(df, file)\r\n      ## fs::file_copy(path, file)\r\n    }\r\n  )\r\n  \r\n\r\n}\r\n\r\n# Create Shiny app ----\r\nshiny::shinyApp(ui, server)\r\n","type":"text"}]
