[{"name":"app.R","content":"## library(shiny)\r\n# library(DT)\r\n# library(haven)\r\n\r\ndownloadButton <- function(...) {\r\n  tag <- shiny::downloadButton(...)\r\n  tag$attribs$download <- NULL\r\n  tag\r\n}\r\n# Define UI for data upload app ----\r\nui <- shiny::fluidPage(\r\n               shiny::titlePanel('xptView'),\r\n\r\n               shiny::sidebarLayout(\r\n                        shiny::sidebarPanel(width = 2,\r\n\r\n                                 shiny::fileInput('file1', \"Choose xpt file\",\r\n                                                  accept = '.xpt'),\r\n                                 shiny::tags$hr(style = \"border-top: 1px dashed black\"),\r\n                                 ## shiny::tags$br(),\r\n                                 shiny::actionButton('add_row', label = \"Add Row\"),\r\n                                 shiny::tags$hr(style = \"border-top: 1px dashed black\"),\r\n\r\n                                 shiny::actionButton('delete_row', label = \"Delete Row\"),\r\n                                 shiny::tags$hr(style = \"border-top: 1px dashed black\"),\r\n\r\n                                 ## shiny::tags$br(),\r\n\r\n                                 downloadButton('down_xpt', 'Download file as xpt'),\r\n                                 shiny::tags$hr(style = \"border-top: 1px dashed black\"),\r\n                                 downloadButton('down_csv', 'Download file as csv')\r\n\r\n                               ),\r\n\r\n               shiny::mainPanel(\r\n                        DT::DTOutput('contents')\r\n                      )))\r\n\r\n\r\n# Define server logic to read selected file ----\r\nserver <- function(input, output) {\r\n  v <- shiny::reactiveVal()\r\n  shiny::observeEvent(input$file1,{\r\n    shiny::req(input$file1)\r\n    tab <- haven::read_xpt(input$file1$datapath)\r\n    ## tab <- SASxport::read.xport(input$file1$datapath)\r\n    v(tab)\r\n  })\r\n # render tabel\r\n  output$contents <- DT::renderDT({\r\n    shiny::req(input$file1)\r\n    DT::datatable(v(),\r\n                  ## selection = 'single',\r\n                  ## options = list(dom = 't'),\r\n                  editable = T)\r\n  })\r\n# add row , by default add last row to the begining of table\r\n  shiny::observeEvent(input$add_row,{\r\n    df <- v()\r\n    nr <- df[nrow(df), ]\r\n    t <- rbind(nr,df)\r\n    v(t)\r\n  })\r\n  ## selected row will be deleted. if no row seletecd, no row deleted\r\n  shiny::observeEvent(input$delete_row, {\r\n    t  <- v()\r\n    if (!is.null(input$contents_rows_selected)) {\r\n      t <- t[-as.numeric(input$contents_rows_selected),]\r\n    }\r\n    v(t)\r\n  })\r\n# update cell value\r\n  shiny::observeEvent(input$contents_cell_edit, {\r\n    info <- input$contents_cell_edit\r\n    edit_row <-  info$row\r\n    edit_col <-  info$col\r\n    edit_value <-  info$value\r\n    t  <-  v()\r\n    t[edit_row,edit_col] <- edit_value\r\n    v(t)\r\n})\r\n# download file as xpt\r\n  output$down_xpt <- shiny::downloadHandler(\r\n                              filename = function() {\r\n                                file_name <- strsplit(input$file1$name, '.xpt')[[1]]\r\n                                \r\n                                 # print(file_name)\r\n                                paste0(file_name, \".xpt\")\r\n                              \r\n\r\n                              },\r\n                              content = function(file) {\r\n                                df <- v()\r\n                                domain <- strsplit(input$file1$name, '.xpt')[[1]]\r\n                               temp_dir <- tempdir()\r\n                               print(temp_dir)\r\n                               path <- fs::path(temp_dir, paste0(toupper(domain), '.xpt'))\r\n                                ## SASxport::write.xport(df, file=file)\r\n                                \r\n                                haven::write_xpt(data = df, path=path, version = 5)\r\n                                fs::file_copy(path, file)\r\n                              }\r\n                            )\r\n\r\n # download csv\r\n  output$down_csv <- shiny::downloadHandler(\r\n                              filename = function() {\r\n                                file_name <- strsplit(input$file1$name, '.xpt')[[1]]\r\n                                print(file_name)\r\n                                paste0(file_name, \".csv\")\r\n\r\n                              },\r\n                              content = function(file) {\r\n                                df <- v()\r\n                                write.csv(df, file=file, quote= FALSE, row.names=FALSE)\r\n                              }\r\n                            )\r\n\r\n}\r\n  # Create Shiny app ----\r\nshiny::shinyApp(ui, server)\r\n","type":"text"}]
